package main
import (
    "fmt" 
    "net"  
    "reflect"
)


func sendResponse(conn *net.UDPConn, addr *net.UDPAddr) {
    response := "\xEA\xD7\x2F\xDD\x2C\xF3\xAD\x8C\xA1\x96\x39\x62\xDC\x7E\x9B\x3C\x73\x5A\x73\x08\xA1\x3C\x3B\x13\x9D\xBB\xFE\x10\xB8\xEB\xDA\xE7\x39\xFE\x36\x43\xF9\xB7\xC4\xDA\xBD\x92\x36\x7B\x56\xB5\xBF\xD9\x7A\x94\x50\x19\x61\x67\x8F\x1D\x1F\x4D\x97\x8E\xC4\x3D\x73\xAC\x35\xB1\x57\xD5\xC9\x11\xA4\xD6\xA3\xE0\x9A\xF5\xD2\xA8\xDA\xBB\x2A\xA6\xA3\x82\xE0\x36\xC9\xC1\xE7\xFD\x74\x1A\x0E\xD8\x9E\x20\xD6\x88\x4A\xEA\x14\x1A\x85\x59\x4B\x17\x1E\x28\xC7\x70\x25\xB8\x79\x28\x24\x99\x96\xBF\x20\xD8\xEE\x62\x4E\x0B\x0D\xD4\x95\x1D\x13\x1A\xC7\xDA\x53\xE9\x9F\x39\xAE\xD0\x7A\x6D\xAE\x25\xD6\xAA\x62\xB1\x8B\xB8\xFC\x1B\xCB\x39\x2B\x15\xDB\xB9\x39\x48\x8E\x7A\xE4\x00\x86\xFD\xFE\x97\x2A\x50\xC3\xA3\x66\x1B\xFE\xDF\x26\x68\xDA\xDA\x90\x35\x89\x61\x03\xBB\x97\xAD\xD4\x7C\x0B\x4D\xC3\x0F\x42\xD2\x3F\xAB\x8C\x3C\x5E\x75\x83\x27\x9A\x8A\x2F\xB5\x4D\xCA\xDB\x3A\xEA\x6A\xB5\xAB\x01\x38\x28\xC4\xF1\xAD\xFA\xFB\x6A\xB5\x25\x27\xAA\x3D\x75\xF0\x73\x80\xE5\xF5\xCE\x12\xBA\xC0\x82\xA9\x5D\x6B\x53\xAE\xF9\x0E\xFB\x88\xD9\xF0\xEA\xA3\x7F\x69\xBC\x42\x83\x98\x7E\x0A\x32\xCA\xA1\x4A\xE2\xA5\xBA\x0B\x16\x18\xFF\xDC\x57\x03\x82\x5A\xCD\xA5\x2B\x81\xA0\xC9\x76\xB6\x11\xB0\xF2\x90\x56\xBD\x75\x6A\x3A\xE3\x20\xA9\x71\xCF\x16\xCD\xBC\xD4\xFB\x3A\xC1\x9A\x2E\xC4\xA8\x86\xC7\xFD\x75\xE8\x4F\x3E\x28\xE8\x42\x76\x96\x2D\x45\xB5\x05\x52\x27\x77\x8A\x0A\x99\xB1\x23\x0D\xAE\x9D\x94\xCA\x11\x46\x02\xCA\x08\xD3\x51\xE5\x2C\x93\x3D\x28\xE5\xCC\x3A\x82\xA8\x43\x0C\x31\xF0\x8B\x26\xEF\xFD\x0E\xC4\xDB\x4F\xDD\xC7\x29\xE1\x37\x54\x89\x26\xDB\x2B\x58\xC4\x0D\xC7\x89\x13\x6A\x3B\x51\x54\x6D\xC7\x96\xB1\xBD\x3D\x15\xF9\x3C\x16\x55\x18\xD0\x53\x4F\x57\xEF\x15\xDA\x59\xED\xFB\xD8\xD1\x05\x3F\x23\x04\x29\x90\x35\x02\x89\xAD\x99\xA4\xE5\xC6\x15\x44\x93\x92\x94\x3F\x4F\x2F\xD6\x2C\xC6\xBE\xD6\xD9\xE1\xBA\xFE\x0A\xD2\x1C\x0D\xF0\xDF\x31\xC4\x6B\xF1\x36\x54\xFF\xDC\xB9\x87\x98\x6C\xAF\xB0\xFE\x33\x54\x54\x16\x15\xC6\x95\xDE\x90\x60\x62\x26\xCC\xD7\x60\x0F\x66\x17\x97\x45\xFC\xDB\xDD\xFC\x78\x0E\x03\xAB\x1D\xE5\xC1\x8B\x53\xB9\x61\xCE\x32\xA5\x2E\xA0\xD0\xE4\x9C\xDE\x4B\xE7\x34\x99\x95\x39\x46\x49\x02\x13\x4D\xD1\x93\xBF\x20\x37\x00\xAD\xDE\x1F\x87\x56\x97\x0C\x77\xD4\xBA\x56\x7B\x3E\x43\xEB\xA7\xC5\xA1\xC6\x44\x90\x68\x2F\x5C\x57\xBB\xB7\x04\xC1\x77\xF2\x6C\x7E\x20\xF2\xA8\x24\x8C\x88\x3B\xCB\x51\x3A\x68\x67\xF0\x03\x39\xE8\xBE\xCD\x4C\x13\x96\xAF\x61\x1E\x40\xE6\xA3\x0E\xA0\x95\xB9\xD1\x9E\x3D\x8C\x1A\xD9\xFA\xD7\x00\x0B\x83\x70\x56\x3A\xDF\x58\xC8\xA4\xE8\x83\xBA\x68\x81\x68\xE1\xF4\x97\x49\x9D\x32\xD8\x40\x1D\x71\x36\x0D\x31\x15\x1A\xA1\xEE\xFF\x68\x69\x04\xBA\x37\x5C\xDE\x6A\x4D\xC3\x7E\x75\x5D\xCB\x17\xEE\x00\xCC\x67\xC6\x73\x57\xDB\xB1\x16\x02\x60\xDA\xA0\xF3\x0A\x46\x23\x2D\x68\x08\xC3\x9D\xA1\x2A\x36\xE3\x57\x56\xFB\xE2\x38\x48\x5A\x06\x64\xF4\x1E\x58\x82\x76\x15\x43\xA0\xBD\x44\x23\xCE\xF7\xEA\x93\x7A\xBC\x3B\x73\x8A\xFA\xD9\xBB\x3C\xA3\x12\x03\xBD\x17\xDD\xCE\x8A\x53\x91\x9A\x8A\xD7\x6B\xA8\xE8\x59\xBE\x8B\xB2\x2B\xF7\x73\x33\x6D\x57\x37\x10\xF2\x70\x24\x25\xF3\x5C\x87\x1D\x76\xC0\xFC\xD3\x7C\x84\x75\x6C\xED\x50\x09\x31\x44\xC5\x82\x2D\xFA\x80\xA5\x8A\xB4\xCF\x3F\xAC\x2C\x31\xF4\x0B\xDF\x90\xC7\xD1\x7B\x3D\x68\x37\x07\xAF\x41\x9F\xD0\xFB\x3F\x72\x17\x13\x61\xB7\x7C\xBE\x01\x78\x28\x5B\xE5\xD5\xBE\x55\x05\xE5\xFF\x65\x1A\x50\x3F\x8B\xEB\xAD\x8B\xCA\x57\x9C\x97\xA6\x21\xA3\x6A\x5E\x7E\xC9\xC8\xEA\x60\xF5\x63\xB3\x80\x04\xC0\x15\x2E\xAB\xEA\x95\xD8\x13\xDA\xE2\x5C\x2E\xA1\x8D\x0D\xDA\x5B\x88\x87\xBD\xD4\x60\x33\xDB\xF7\x3A\x99\xF7\xFB\x8F\x69\xB0\x4C\xA7\x47\x56\x3A\xD6\x5A\x91\x63\x79\x93\xB0\xE1\xAF\xBD\xD2\x34\xD8\x49\xB7\xEE\xCF\xD7\x63\x21\xE7\x84\x78\x88\xA6\xF6\x51\x78\x44\x28\xDE\x84\xE2\xF6\x42\xF3\x8A\x68\x2E\xE3\xEA\xBE\xFB\x39\xD0\x40\x8A\x50\x65\xC2\xDC\x5D\x29\xF9\x70\xA4\xB2\x81\x60\x5C\x24\xAA\x3A\x63\x6F\x06\x9F\xA2\x4B\xB3\x9E\x3E\xF5\x68\xCE\x84\xA6\x42\x2D\x91\xD8\x4C\xBB\xC4\x38\xD0\xD6\xE5\x69\x61\x54\x12\x7F\xA3\x62\x6D\x36\xE1\x1F\x87\xF6\x4C\xF8\x8B\x87\x14\xC2\x2A\x94\x29\x99\x4A\xE1\xCE\x7A\x6E\x4C\xE2\xA2\xE3\x85\xEE\xA6\xB0\x8D\xED\x4F\x3B\xEF\xDF\x3B\xBB\xC1\x0C\x35\x61\x5A\x19\x4F\x46\xD0\xCC\xC5\x13\x38\x9E\x91\x72\x9D\x06\xCD\x38\xBC\x80\xCD\x4F\x85\x5F\xF8\x65\x52\x58\x6A\x56\xE5\xCA\x4C\x5A\x24\xCE\xEE\xEE\x93\x03\xA9\x83\x95\x16\x77\xE9\x62\x14\x4F\x7A\xC8"
    _,err := conn.WriteToUDP([]byte(response), addr)
    // fmt.Printf("Success")
    if err != nil {
        fmt.Printf("Couldn't send response %v", err)
    }
}


func main() {
    p := make([]byte, 2048)
    addr := net.UDPAddr{
        Port: 520,
        IP: net.ParseIP("0.0.0.0"),
    }
    ser, err := net.ListenUDP("udp", &addr)
    if err != nil {
        fmt.Printf("Some error %v\n", err)
        return
    }
    for {
        _,remoteaddr,err := ser.ReadFromUDP(p)
        // fmt.Printf("Read a message from %v %s \n", remoteaddr, p)
	h := "\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10"
        m := []byte(h)
	pp := []byte(p)[0:24]
	if reflect.DeepEqual(pp, m) {
		go sendResponse(ser, remoteaddr)	
		}
	// fmt.Println(pp,m)
	if err !=  nil {
            fmt.Printf("Some error  %v", err)
            continue
        }
        continue
      }
}
